package pl.pmuflon.busted;

import pl.pmuflon.busted.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table EXPENSE.
 */
public class Expense {

    private Long id;
    /** Not-null value. */
    private String name;
    private float amount;
    /** Not-null value. */
    private java.util.Date date;
    private Long planned;

    /** Used to resolve relations */
    private DaoSession daoSession;

    /** Used for active entity operations. */
    private ExpenseDao myDao;

    private PlannedExpense plannedExpense;
    private Long plannedExpense__resolvedKey;


    public Expense() {
    }

    public Expense(Long id) {
        this.id = id;
    }

    public Expense(Long id, String name, float amount, java.util.Date date, Long planned) {
        this.id = id;
        this.name = name;
        this.amount = amount;
        this.date = date;
        this.planned = planned;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getExpenseDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public float getAmount() {
        return amount;
    }

    public void setAmount(float amount) {
        this.amount = amount;
    }

    /** Not-null value. */
    public java.util.Date getDate() {
        return date;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDate(java.util.Date date) {
        this.date = date;
    }

    public Long getPlanned() {
        return planned;
    }

    public void setPlanned(Long planned) {
        this.planned = planned;
    }

    /** To-one relationship, resolved on first access. */
    public PlannedExpense getPlannedExpense() {
        if (plannedExpense__resolvedKey == null || !plannedExpense__resolvedKey.equals(planned)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PlannedExpenseDao targetDao = daoSession.getPlannedExpenseDao();
            plannedExpense = targetDao.load(planned);
            plannedExpense__resolvedKey = planned;
        }
        return plannedExpense;
    }

    public void setPlannedExpense(PlannedExpense plannedExpense) {
        this.plannedExpense = plannedExpense;
        planned = plannedExpense == null ? null : plannedExpense.getId();
        plannedExpense__resolvedKey = planned;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }
    
    public String toString() {
    	return "" + name + " : " + amount;
    }

}
