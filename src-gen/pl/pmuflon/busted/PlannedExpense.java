package pl.pmuflon.busted;

import java.util.List;
import pl.pmuflon.busted.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table PLANNED_EXPENSE.
 */
public class PlannedExpense {

    private Long id;
    /** Not-null value. */
    private String name;
    private float amount;
    /** Not-null value. */
    private String periodicity;
    /** Not-null value. */
    private java.util.Date date;
    private Long expenses;

    /** Used to resolve relations */
    private DaoSession daoSession;

    /** Used for active entity operations. */
    private PlannedExpenseDao myDao;

    private List<Expense> expenseList;

    public PlannedExpense() {
    }

    public PlannedExpense(Long id) {
        this.id = id;
    }

    public PlannedExpense(Long id, String name, float amount, String periodicity, java.util.Date date, Long expenses) {
        this.id = id;
        this.name = name;
        this.amount = amount;
        this.periodicity = periodicity;
        this.date = date;
        this.expenses = expenses;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPlannedExpenseDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public float getAmount() {
        return amount;
    }

    public void setAmount(float amount) {
        this.amount = amount;
    }

    /** Not-null value. */
    public String getPeriodicity() {
        return periodicity;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPeriodicity(String periodicity) {
        this.periodicity = periodicity;
    }

    /** Not-null value. */
    public java.util.Date getDate() {
        return date;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDate(java.util.Date date) {
        this.date = date;
    }

    public Long getExpenses() {
        return expenses;
    }

    public void setExpenses(Long expenses) {
        this.expenses = expenses;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public synchronized List<Expense> getExpenseList() {
        if (expenseList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ExpenseDao targetDao = daoSession.getExpenseDao();
            expenseList = targetDao._queryPlannedExpense_ExpenseList(id);
        }
        return expenseList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetExpenseList() {
        expenseList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
