package pl.pmuflon.busted;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import pl.pmuflon.busted.PlannedExpense;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PLANNED_EXPENSE.
*/
public class PlannedExpenseDao extends AbstractDao<PlannedExpense, Long> {

    public static final String TABLENAME = "PLANNED_EXPENSE";

    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Amount = new Property(2, float.class, "amount", false, "AMOUNT");
        public final static Property Periodicity = new Property(3, String.class, "periodicity", false, "PERIODICITY");
        public final static Property Date = new Property(4, java.util.Date.class, "date", false, "DATE");
        public final static Property Expenses = new Property(5, Long.class, "expenses", false, "EXPENSES");
    };

    private DaoSession daoSession;


    public PlannedExpenseDao(DaoConfig config) {
        super(config);
    }
    
    public PlannedExpenseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'PLANNED_EXPENSE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT NOT NULL ," + // 1: name
                "'AMOUNT' REAL NOT NULL ," + // 2: amount
                "'PERIODICITY' TEXT NOT NULL ," + // 3: periodicity
                "'DATE' INTEGER NOT NULL ," + // 4: date
                "'EXPENSES' INTEGER);"; // 5: expenses
        db.execSQL(sql);
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PLANNED_EXPENSE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PlannedExpense entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindDouble(3, entity.getAmount());
        stmt.bindString(4, entity.getPeriodicity());
        stmt.bindLong(5, entity.getDate().getTime());
 
        Long expenses = entity.getExpenses();
        if (expenses != null) {
            stmt.bindLong(6, expenses);
        }
    }

    @Override
    protected void attachEntity(PlannedExpense entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PlannedExpense readEntity(Cursor cursor, int offset) {
        PlannedExpense entity = new PlannedExpense( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.getFloat(offset + 2), // amount
            cursor.getString(offset + 3), // periodicity
            new java.util.Date(cursor.getLong(offset + 4)), // date
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // expenses
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PlannedExpense entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setAmount(cursor.getFloat(offset + 2));
        entity.setPeriodicity(cursor.getString(offset + 3));
        entity.setDate(new java.util.Date(cursor.getLong(offset + 4)));
        entity.setExpenses(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    @Override
    protected Long updateKeyAfterInsert(PlannedExpense entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PlannedExpense entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
